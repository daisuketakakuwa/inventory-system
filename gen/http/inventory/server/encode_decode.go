// Code generated by goa v3.7.2, DO NOT EDIT.
//
// inventory HTTP server encoders and decoders
//
// Command:
// $ goa gen inventory-system/api/svc/design

package server

import (
	"context"
	inventoryviews "inventory-system/gen/inventory/views"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the
// inventory create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the inventory
// create endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateProductPayload(&body)

		return payload, nil
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the
// inventory update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the inventory
// update endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			productID int

			params = mux.Vars(r)
		)
		{
			productIDRaw := params["productId"]
			v, err2 := strconv.ParseInt(productIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("productID", productIDRaw, "integer"))
			}
			productID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateProductPayload(&body, productID)

		return payload, nil
	}
}

// EncodeFindResponse returns an encoder for responses returned by the
// inventory find endpoint.
func EncodeFindResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*inventoryviews.Findproductresult)
		enc := encoder(ctx, w)
		body := NewFindResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFindRequest returns a decoder for requests sent to the inventory find
// endpoint.
func DecodeFindRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			productID int
			err       error

			params = mux.Vars(r)
		)
		{
			productIDRaw := params["productId"]
			v, err2 := strconv.ParseInt(productIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("productID", productIDRaw, "integer"))
			}
			productID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewFindPayload(productID)

		return payload, nil
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the
// inventory delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the inventory
// delete endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			productID int
			err       error

			params = mux.Vars(r)
		)
		{
			productIDRaw := params["productId"]
			v, err2 := strconv.ParseInt(productIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("productID", productIDRaw, "integer"))
			}
			productID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePayload(productID)

		return payload, nil
	}
}
