// Code generated by goa v3.7.2, DO NOT EDIT.
//
// inventory gRPC client encoders and decoders
//
// Command:
// $ goa gen inventory-system/api/svc/design

package client

import (
	"context"
	inventorypb "inventory-system/gen/grpc/inventory/pb"
	inventory "inventory-system/gen/inventory"
	inventoryviews "inventory-system/gen/inventory/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCreateFunc builds the remote method to invoke for "inventory" service
// "create" endpoint.
func BuildCreateFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*inventorypb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &inventorypb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to inventory create endpoint.
func EncodeCreateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.CreateProductPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "create", "*inventory.CreateProductPayload", v)
	}
	return NewProtoCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the inventory create endpoint.
func DecodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*inventorypb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "create", "*inventorypb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	return res, nil
}

// BuildUpdateFunc builds the remote method to invoke for "inventory" service
// "update" endpoint.
func BuildUpdateFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*inventorypb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &inventorypb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to inventory update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.UpdateProductPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "update", "*inventory.UpdateProductPayload", v)
	}
	return NewProtoUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the inventory update endpoint.
func DecodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*inventorypb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "update", "*inventorypb.UpdateResponse", v)
	}
	res := NewUpdateResult(message)
	return res, nil
}

// BuildFindFunc builds the remote method to invoke for "inventory" service
// "find" endpoint.
func BuildFindFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Find(ctx, reqpb.(*inventorypb.FindRequest), opts...)
		}
		return grpccli.Find(ctx, &inventorypb.FindRequest{}, opts...)
	}
}

// EncodeFindRequest encodes requests sent to inventory find endpoint.
func EncodeFindRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.FindPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "find", "*inventory.FindPayload", v)
	}
	return NewProtoFindRequest(payload), nil
}

// DecodeFindResponse decodes responses from the inventory find endpoint.
func DecodeFindResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*inventorypb.FindResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "find", "*inventorypb.FindResponse", v)
	}
	res := NewFindResult(message)
	vres := &inventoryviews.Findproductresult{Projected: res, View: view}
	if err := inventoryviews.ValidateFindproductresult(vres); err != nil {
		return nil, err
	}
	return inventory.NewFindproductresult(vres), nil
}

// BuildDeleteFunc builds the remote method to invoke for "inventory" service
// "delete" endpoint.
func BuildDeleteFunc(grpccli inventorypb.InventoryClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Delete(ctx, reqpb.(*inventorypb.DeleteRequest), opts...)
		}
		return grpccli.Delete(ctx, &inventorypb.DeleteRequest{}, opts...)
	}
}

// EncodeDeleteRequest encodes requests sent to inventory delete endpoint.
func EncodeDeleteRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*inventory.DeletePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "delete", "*inventory.DeletePayload", v)
	}
	return NewProtoDeleteRequest(payload), nil
}

// DecodeDeleteResponse decodes responses from the inventory delete endpoint.
func DecodeDeleteResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*inventorypb.DeleteResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventory", "delete", "*inventorypb.DeleteResponse", v)
	}
	res := NewDeleteResult(message)
	return res, nil
}
