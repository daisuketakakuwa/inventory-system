// Code generated by goa v3.7.2, DO NOT EDIT.
//
// inventory service
//
// Command:
// $ goa gen inventory-system/api/svc/design

package inventory

import (
	"context"
	inventoryviews "inventory-system/gen/inventory/views"
)

// The calc service performs operations on numbers.
type Service interface {
	// Create implements create.
	Create(context.Context, *CreateProductPayload) (res string, err error)
	// Update implements update.
	Update(context.Context, *UpdateProductPayload) (res string, err error)
	// Find implements find.
	Find(context.Context, *FindPayload) (res *Findproductresult, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (res string, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "inventory"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"create", "update", "find", "delete"}

// CreateProductPayload is the payload type of the inventory service create
// method.
type CreateProductPayload struct {
	ProductName        string
	ProductDescription *string
	ProductMinStock    *int32
}

// DeletePayload is the payload type of the inventory service delete method.
type DeletePayload struct {
	ProductID int
}

// FindPayload is the payload type of the inventory service find method.
type FindPayload struct {
	ProductID int
}

// Findproductresult is the result type of the inventory service find method.
type Findproductresult struct {
	ProductID          *int
	ProductName        *string
	ProductDescription *string
	ProductMinStock    *int32
}

// UpdateProductPayload is the payload type of the inventory service update
// method.
type UpdateProductPayload struct {
	ProductID          int
	ProductName        *string
	ProductDescription *string
	ProductMinStock    *int32
}

// NewFindproductresult initializes result type Findproductresult from viewed
// result type Findproductresult.
func NewFindproductresult(vres *inventoryviews.Findproductresult) *Findproductresult {
	return newFindproductresult(vres.Projected)
}

// NewViewedFindproductresult initializes viewed result type Findproductresult
// from result type Findproductresult using the given view.
func NewViewedFindproductresult(res *Findproductresult, view string) *inventoryviews.Findproductresult {
	p := newFindproductresultView(res)
	return &inventoryviews.Findproductresult{Projected: p, View: "default"}
}

// newFindproductresult converts projected type Findproductresult to service
// type Findproductresult.
func newFindproductresult(vres *inventoryviews.FindproductresultView) *Findproductresult {
	res := &Findproductresult{
		ProductID:          vres.ProductID,
		ProductName:        vres.ProductName,
		ProductDescription: vres.ProductDescription,
		ProductMinStock:    vres.ProductMinStock,
	}
	return res
}

// newFindproductresultView projects result type Findproductresult to projected
// type FindproductresultView using the "default" view.
func newFindproductresultView(res *Findproductresult) *inventoryviews.FindproductresultView {
	vres := &inventoryviews.FindproductresultView{
		ProductID:          res.ProductID,
		ProductName:        res.ProductName,
		ProductDescription: res.ProductDescription,
		ProductMinStock:    res.ProductMinStock,
	}
	return vres
}
